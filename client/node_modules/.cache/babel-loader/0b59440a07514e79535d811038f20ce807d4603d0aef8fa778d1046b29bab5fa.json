{"ast":null,"code":"import axios from 'axios';\nexport const fetchCountryMedals = countryName => {\n  return axios.get('http://localhost:3000/countries').then(response => {\n    const country = response.data.find(c => c.name === countryName);\n    if (!country) {\n      throw new Error(`Country with name ${countryName} not found`);\n    }\n    return country;\n  }).catch(error => {\n    console.error('Error fetching country medals:', error);\n    throw error;\n  });\n};\nexport const fetchDiscipline = (countryName, disciplineName) => {\n  return axios.get('http://localhost:3000/countries').then(response => {\n    // Находим страну по имени\n    const country = response.data.find(c => c.name === countryName);\n    if (!country) {\n      throw new Error(`Country with name ${countryName} not found`);\n    }\n\n    // Находим дисциплину по имени\n    const discipline = country.disciplines.find(d => d.name === disciplineName);\n    if (!discipline) {\n      throw new Error(`Discipline with name ${disciplineName} not found in country ${countryName}`);\n    }\n\n    // Возвращаем дисциплину\n    return discipline;\n  }).catch(error => {\n    console.error('Error fetching discipline:', error);\n    throw error;\n  });\n};\nexport const fetchDisciplines = disciplineName => {\n  return axios.get('http://localhost:3000/countries').then(response => {\n    // Получаем все страны\n    const countries = response.data;\n\n    // Фильтруем дисциплины по имени дисциплины\n    const disciplines = countries.flatMap(country => country.disciplines.filter(discipline => discipline.name === disciplineName).map(discipline => ({\n      country: country.name,\n      discipline\n    })) // Возвращаем страну и дисциплину\n    );\n    return disciplines;\n  }).catch(error => {\n    console.error('Error fetching disciplines:', error);\n    throw error;\n  });\n};","map":{"version":3,"names":["axios","fetchCountryMedals","countryName","get","then","response","country","data","find","c","name","Error","catch","error","console","fetchDiscipline","disciplineName","discipline","disciplines","d","fetchDisciplines","countries","flatMap","filter","map"],"sources":["C:/Users/butabayev.yerali/Desktop/erali/end/er15/client/src/api/countryAPI.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const fetchCountryMedals = (countryName) => {\r\n    return axios.get('http://localhost:3000/countries')\r\n        .then(response => {\r\n            const country = response.data.find(c => c.name === countryName);\r\n            if (!country) {\r\n                throw new Error(`Country with name ${countryName} not found`);\r\n            }\r\n            return country;\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching country medals:', error);\r\n            throw error;\r\n        });\r\n};\r\n\r\nexport const fetchDiscipline = (countryName, disciplineName) => {\r\n    return axios.get('http://localhost:3000/countries')\r\n        .then(response => {\r\n            // Находим страну по имени\r\n            const country = response.data.find(c => c.name === countryName);\r\n            if (!country) {\r\n                throw new Error(`Country with name ${countryName} not found`);\r\n            }\r\n\r\n            // Находим дисциплину по имени\r\n            const discipline = country.disciplines.find(d => d.name === disciplineName);\r\n            if (!discipline) {\r\n                throw new Error(`Discipline with name ${disciplineName} not found in country ${countryName}`);\r\n            }\r\n\r\n            // Возвращаем дисциплину\r\n            return discipline;\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching discipline:', error);\r\n            throw error;\r\n        });\r\n};\r\n\r\nexport const fetchDisciplines = (disciplineName) => {\r\n    return axios.get('http://localhost:3000/countries')\r\n        .then(response => {\r\n            // Получаем все страны\r\n            const countries = response.data;\r\n\r\n            // Фильтруем дисциплины по имени дисциплины\r\n            const disciplines = countries.flatMap(country => \r\n                country.disciplines\r\n                    .filter(discipline => discipline.name === disciplineName)\r\n                    .map(discipline => ({ country: country.name, discipline })) // Возвращаем страну и дисциплину\r\n            );\r\n\r\n            return disciplines;\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching disciplines:', error);\r\n            throw error;\r\n        });\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,kBAAkB,GAAIC,WAAW,IAAK;EAC/C,OAAOF,KAAK,CAACG,GAAG,CAAC,iCAAiC,CAAC,CAC9CC,IAAI,CAACC,QAAQ,IAAI;IACd,MAAMC,OAAO,GAAGD,QAAQ,CAACE,IAAI,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKR,WAAW,CAAC;IAC/D,IAAI,CAACI,OAAO,EAAE;MACV,MAAM,IAAIK,KAAK,CAAC,qBAAqBT,WAAW,YAAY,CAAC;IACjE;IACA,OAAOI,OAAO;EAClB,CAAC,CAAC,CACDM,KAAK,CAACC,KAAK,IAAI;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf,CAAC,CAAC;AACV,CAAC;AAED,OAAO,MAAME,eAAe,GAAGA,CAACb,WAAW,EAAEc,cAAc,KAAK;EAC5D,OAAOhB,KAAK,CAACG,GAAG,CAAC,iCAAiC,CAAC,CAC9CC,IAAI,CAACC,QAAQ,IAAI;IACd;IACA,MAAMC,OAAO,GAAGD,QAAQ,CAACE,IAAI,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKR,WAAW,CAAC;IAC/D,IAAI,CAACI,OAAO,EAAE;MACV,MAAM,IAAIK,KAAK,CAAC,qBAAqBT,WAAW,YAAY,CAAC;IACjE;;IAEA;IACA,MAAMe,UAAU,GAAGX,OAAO,CAACY,WAAW,CAACV,IAAI,CAACW,CAAC,IAAIA,CAAC,CAACT,IAAI,KAAKM,cAAc,CAAC;IAC3E,IAAI,CAACC,UAAU,EAAE;MACb,MAAM,IAAIN,KAAK,CAAC,wBAAwBK,cAAc,yBAAyBd,WAAW,EAAE,CAAC;IACjG;;IAEA;IACA,OAAOe,UAAU;EACrB,CAAC,CAAC,CACDL,KAAK,CAACC,KAAK,IAAI;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,MAAMA,KAAK;EACf,CAAC,CAAC;AACV,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAIJ,cAAc,IAAK;EAChD,OAAOhB,KAAK,CAACG,GAAG,CAAC,iCAAiC,CAAC,CAC9CC,IAAI,CAACC,QAAQ,IAAI;IACd;IACA,MAAMgB,SAAS,GAAGhB,QAAQ,CAACE,IAAI;;IAE/B;IACA,MAAMW,WAAW,GAAGG,SAAS,CAACC,OAAO,CAAChB,OAAO,IACzCA,OAAO,CAACY,WAAW,CACdK,MAAM,CAACN,UAAU,IAAIA,UAAU,CAACP,IAAI,KAAKM,cAAc,CAAC,CACxDQ,GAAG,CAACP,UAAU,KAAK;MAAEX,OAAO,EAAEA,OAAO,CAACI,IAAI;MAAEO;IAAW,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;IAED,OAAOC,WAAW;EACtB,CAAC,CAAC,CACDN,KAAK,CAACC,KAAK,IAAI;IACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACf,CAAC,CAAC;AACV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}